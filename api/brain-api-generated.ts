/* tslint:disable */
/* eslint-disable */
/*
FastAPI

Open-source RAG Framework

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiBrainDefinitionEntityInputNullable } from '../models';
// @ts-ignore
import { BrainIntegrationSettingsNullable } from '../models';
// @ts-ignore
import { BrainIntegrationUpdateSettingsNullable } from '../models';
// @ts-ignore
import { BrainQuestionRequest } from '../models';
// @ts-ignore
import { BrainSubscriptionUpdatableProperties } from '../models';
// @ts-ignore
import { BrainTypeNullable } from '../models';
// @ts-ignore
import { BrainUpdatableProperties } from '../models';
// @ts-ignore
import { CreateApiBrainDefinitionNullable } from '../models';
// @ts-ignore
import { CreateBrainProperties } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { IntegrationDescriptionEntity } from '../models';
// @ts-ignore
import { PublicBrain } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BrainApi - axios parameter creator
 * @export
 */
export const BrainApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Accept an invitation to a brain for a user. This function removes the invitation from the subscription invitations and adds the user to the brain users.
         * @summary Accept Invitation
         * @param {string} brainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptInvitation: async (brainId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brainId' is not null or undefined
            assertParamExists('acceptInvitation', 'brainId', brainId)
            const localVarPath = `/brains/{brain_id}/subscription/accept`
                .replace(`{${"brain_id"}}`, encodeURIComponent(String(brainId !== undefined ? brainId : `-brain_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/brains/{brain_id}/subscription/accept',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new brain for the user.
         * @summary Create New Brain
         * @param {CreateBrainProperties} createBrainProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewBrain: async (createBrainProperties: CreateBrainProperties, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createBrainProperties' is not null or undefined
            assertParamExists('createNewBrain', 'createBrainProperties', createBrainProperties)
            const localVarPath = `/brains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createBrainProperties,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/brains',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createBrainProperties, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Decline an invitation to a brain for a user. This function removes the invitation from the subscription invitations.
         * @summary Decline Invitation
         * @param {string} brainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        declineInvitation: async (brainId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brainId' is not null or undefined
            assertParamExists('declineInvitation', 'brainId', brainId)
            const localVarPath = `/brains/{brain_id}/subscription/decline`
                .replace(`{${"brain_id"}}`, encodeURIComponent(String(brainId !== undefined ? brainId : `-brain_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/brains/{brain_id}/subscription/decline',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all brains for the current user.
         * @summary Retrieve All Brains For User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllForUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/brains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/brains',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all Quivr public brains.
         * @summary Retrieve Public Brains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPublic: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/brains/public`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/brains/public',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve details of a specific brain by its ID.
         * @summary Retrieve Brain By Id
         * @param {string} brainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (brainId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brainId' is not null or undefined
            assertParamExists('getById', 'brainId', brainId)
            const localVarPath = `/brains/{brain_id}`
                .replace(`{${"brain_id"}}`, encodeURIComponent(String(brainId !== undefined ? brainId : `-brain_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/brains/{brain_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve or create the default brain for the current user.
         * @summary Retrieve Default Brain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultBrain: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/brains/default`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/brains/default',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the integration brain description.
         * @summary Get Integration Brain Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDescription: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/brains/integrations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/brains/integrations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the question context from a specific brain.
         * @summary Get Question Context For Brain
         * @param {string} brainId 
         * @param {BrainQuestionRequest} brainQuestionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestionContext: async (brainId: string, brainQuestionRequest: BrainQuestionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brainId' is not null or undefined
            assertParamExists('getQuestionContext', 'brainId', brainId)
            // verify required parameter 'brainQuestionRequest' is not null or undefined
            assertParamExists('getQuestionContext', 'brainQuestionRequest', brainQuestionRequest)
            const localVarPath = `/brains/{brain_id}/documents`
                .replace(`{${"brain_id"}}`, encodeURIComponent(String(brainId !== undefined ? brainId : `-brain_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: brainQuestionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/brains/{brain_id}/documents',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(brainQuestionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all users for a brain
         * @summary Get Users With Brain Access
         * @param {string} brainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (brainId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brainId' is not null or undefined
            assertParamExists('getUsers', 'brainId', brainId)
            const localVarPath = `/brains/{brain_id}/users`
                .replace(`{${"brain_id"}}`, encodeURIComponent(String(brainId !== undefined ? brainId : `-brain_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/brains/{brain_id}/users',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a user\'s subscription to a brain
         * @summary Remove User Subscription
         * @param {string} brainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserSubscription: async (brainId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brainId' is not null or undefined
            assertParamExists('removeUserSubscription', 'brainId', brainId)
            const localVarPath = `/brains/{brain_id}/subscription`
                .replace(`{${"brain_id"}}`, encodeURIComponent(String(brainId !== undefined ? brainId : `-brain_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/brains/{brain_id}/subscription',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set a brain as the default for the current user.
         * @summary Set Brain As Default
         * @param {string} brainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDefault: async (brainId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brainId' is not null or undefined
            assertParamExists('setDefault', 'brainId', brainId)
            const localVarPath = `/brains/{brain_id}/default`
                .replace(`{${"brain_id"}}`, encodeURIComponent(String(brainId !== undefined ? brainId : `-brain_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/brains/{brain_id}/default',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing brain\'s configuration.
         * @summary Update Existing Brain
         * @param {string} brainId 
         * @param {BrainUpdatableProperties} brainUpdatableProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConfiguration: async (brainId: string, brainUpdatableProperties: BrainUpdatableProperties, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brainId' is not null or undefined
            assertParamExists('updateConfiguration', 'brainId', brainId)
            // verify required parameter 'brainUpdatableProperties' is not null or undefined
            assertParamExists('updateConfiguration', 'brainUpdatableProperties', brainUpdatableProperties)
            const localVarPath = `/brains/{brain_id}`
                .replace(`{${"brain_id"}}`, encodeURIComponent(String(brainId !== undefined ? brainId : `-brain_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: brainUpdatableProperties,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/brains/{brain_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(brainUpdatableProperties, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing brain\'s secrets.
         * @summary Update Existing Brain Secrets
         * @param {string} brainId 
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSecretsValues: async (brainId: string, requestBody: { [key: string]: string; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brainId' is not null or undefined
            assertParamExists('updateSecretsValues', 'brainId', brainId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('updateSecretsValues', 'requestBody', requestBody)
            const localVarPath = `/brains/{brain_id}/secrets-values`
                .replace(`{${"brain_id"}}`, encodeURIComponent(String(brainId !== undefined ? brainId : `-brain_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: requestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/brains/{brain_id}/secrets-values',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Brain Subscription
         * @param {string} brainId 
         * @param {BrainSubscriptionUpdatableProperties} brainSubscriptionUpdatableProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription: async (brainId: string, brainSubscriptionUpdatableProperties: BrainSubscriptionUpdatableProperties, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brainId' is not null or undefined
            assertParamExists('updateSubscription', 'brainId', brainId)
            // verify required parameter 'brainSubscriptionUpdatableProperties' is not null or undefined
            assertParamExists('updateSubscription', 'brainSubscriptionUpdatableProperties', brainSubscriptionUpdatableProperties)
            const localVarPath = `/brains/{brain_id}/subscription`
                .replace(`{${"brain_id"}}`, encodeURIComponent(String(brainId !== undefined ? brainId : `-brain_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: brainSubscriptionUpdatableProperties,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/brains/{brain_id}/subscription',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(brainSubscriptionUpdatableProperties, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BrainApi - functional programming interface
 * @export
 */
export const BrainApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BrainApiAxiosParamCreator(configuration)
    return {
        /**
         * Accept an invitation to a brain for a user. This function removes the invitation from the subscription invitations and adds the user to the brain users.
         * @summary Accept Invitation
         * @param {BrainApiAcceptInvitationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptInvitation(requestParameters: BrainApiAcceptInvitationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptInvitation(requestParameters.brainId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new brain for the user.
         * @summary Create New Brain
         * @param {BrainApiCreateNewBrainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewBrain(requestParameters: BrainApiCreateNewBrainRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const createBrainProperties: CreateBrainProperties = {
                description: requestParameters.description,
                name: requestParameters.name,
                status: requestParameters.status,
                model: requestParameters.model,
                temperature: requestParameters.temperature,
                max_tokens: requestParameters.max_tokens,
                prompt_id: requestParameters.prompt_id,
                brain_type: requestParameters.brain_type,
                brain_definition: requestParameters.brain_definition,
                brain_secrets_values: requestParameters.brain_secrets_values,
                connected_brains_ids: requestParameters.connected_brains_ids,
                integration: requestParameters.integration
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewBrain(createBrainProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Decline an invitation to a brain for a user. This function removes the invitation from the subscription invitations.
         * @summary Decline Invitation
         * @param {BrainApiDeclineInvitationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async declineInvitation(requestParameters: BrainApiDeclineInvitationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.declineInvitation(requestParameters.brainId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all brains for the current user.
         * @summary Retrieve All Brains For User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllForUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllForUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all Quivr public brains.
         * @summary Retrieve Public Brains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPublic(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PublicBrain>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPublic(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve details of a specific brain by its ID.
         * @summary Retrieve Brain By Id
         * @param {BrainApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: BrainApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.brainId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve or create the default brain for the current user.
         * @summary Retrieve Default Brain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefaultBrain(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDefaultBrain(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the integration brain description.
         * @summary Get Integration Brain Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDescription(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IntegrationDescriptionEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDescription(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the question context from a specific brain.
         * @summary Get Question Context For Brain
         * @param {BrainApiGetQuestionContextRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuestionContext(requestParameters: BrainApiGetQuestionContextRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const brainQuestionRequest: BrainQuestionRequest = {
                question: requestParameters.question
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuestionContext(requestParameters.brainId, brainQuestionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all users for a brain
         * @summary Get Users With Brain Access
         * @param {BrainApiGetUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(requestParameters: BrainApiGetUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(requestParameters.brainId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a user\'s subscription to a brain
         * @summary Remove User Subscription
         * @param {BrainApiRemoveUserSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeUserSubscription(requestParameters: BrainApiRemoveUserSubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeUserSubscription(requestParameters.brainId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set a brain as the default for the current user.
         * @summary Set Brain As Default
         * @param {BrainApiSetDefaultRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setDefault(requestParameters: BrainApiSetDefaultRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setDefault(requestParameters.brainId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing brain\'s configuration.
         * @summary Update Existing Brain
         * @param {BrainApiUpdateConfigurationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateConfiguration(requestParameters: BrainApiUpdateConfigurationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const brainUpdatableProperties: BrainUpdatableProperties = {
                description: requestParameters.description,
                name: requestParameters.name,
                temperature: requestParameters.temperature,
                model: requestParameters.model,
                max_tokens: requestParameters.max_tokens,
                status: requestParameters.status,
                prompt_id: requestParameters.prompt_id,
                brain_definition: requestParameters.brain_definition,
                connected_brains_ids: requestParameters.connected_brains_ids,
                integration: requestParameters.integration
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateConfiguration(requestParameters.brainId, brainUpdatableProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing brain\'s secrets.
         * @summary Update Existing Brain Secrets
         * @param {BrainApiUpdateSecretsValuesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSecretsValues(requestParameters: BrainApiUpdateSecretsValuesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const requestBody: { [key: string]: string; } = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSecretsValues(requestParameters.brainId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Brain Subscription
         * @param {BrainApiUpdateSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubscription(requestParameters: BrainApiUpdateSubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const brainSubscriptionUpdatableProperties: BrainSubscriptionUpdatableProperties = {
                rights: requestParameters.rights,
                email: requestParameters.email
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSubscription(requestParameters.brainId, brainSubscriptionUpdatableProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BrainApi - factory interface
 * @export
 */
export const BrainApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BrainApiFp(configuration)
    return {
        /**
         * Accept an invitation to a brain for a user. This function removes the invitation from the subscription invitations and adds the user to the brain users.
         * @summary Accept Invitation
         * @param {BrainApiAcceptInvitationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptInvitation(requestParameters: BrainApiAcceptInvitationRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.acceptInvitation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new brain for the user.
         * @summary Create New Brain
         * @param {BrainApiCreateNewBrainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewBrain(requestParameters: BrainApiCreateNewBrainRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createNewBrain(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Decline an invitation to a brain for a user. This function removes the invitation from the subscription invitations.
         * @summary Decline Invitation
         * @param {BrainApiDeclineInvitationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        declineInvitation(requestParameters: BrainApiDeclineInvitationRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.declineInvitation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all brains for the current user.
         * @summary Retrieve All Brains For User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllForUser(options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getAllForUser(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all Quivr public brains.
         * @summary Retrieve Public Brains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPublic(options?: AxiosRequestConfig): AxiosPromise<Array<PublicBrain>> {
            return localVarFp.getAllPublic(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve details of a specific brain by its ID.
         * @summary Retrieve Brain By Id
         * @param {BrainApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: BrainApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve or create the default brain for the current user.
         * @summary Retrieve Default Brain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultBrain(options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getDefaultBrain(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the integration brain description.
         * @summary Get Integration Brain Description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDescription(options?: AxiosRequestConfig): AxiosPromise<Array<IntegrationDescriptionEntity>> {
            return localVarFp.getDescription(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the question context from a specific brain.
         * @summary Get Question Context For Brain
         * @param {BrainApiGetQuestionContextRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestionContext(requestParameters: BrainApiGetQuestionContextRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getQuestionContext(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all users for a brain
         * @summary Get Users With Brain Access
         * @param {BrainApiGetUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(requestParameters: BrainApiGetUsersRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a user\'s subscription to a brain
         * @summary Remove User Subscription
         * @param {BrainApiRemoveUserSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserSubscription(requestParameters: BrainApiRemoveUserSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.removeUserSubscription(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Set a brain as the default for the current user.
         * @summary Set Brain As Default
         * @param {BrainApiSetDefaultRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDefault(requestParameters: BrainApiSetDefaultRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.setDefault(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing brain\'s configuration.
         * @summary Update Existing Brain
         * @param {BrainApiUpdateConfigurationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConfiguration(requestParameters: BrainApiUpdateConfigurationRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateConfiguration(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing brain\'s secrets.
         * @summary Update Existing Brain Secrets
         * @param {BrainApiUpdateSecretsValuesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSecretsValues(requestParameters: BrainApiUpdateSecretsValuesRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateSecretsValues(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Brain Subscription
         * @param {BrainApiUpdateSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription(requestParameters: BrainApiUpdateSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateSubscription(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for acceptInvitation operation in BrainApi.
 * @export
 * @interface BrainApiAcceptInvitationRequest
 */
export type BrainApiAcceptInvitationRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof BrainApiAcceptInvitation
    */
    readonly brainId: string
    
}

/**
 * Request parameters for createNewBrain operation in BrainApi.
 * @export
 * @interface BrainApiCreateNewBrainRequest
 */
export type BrainApiCreateNewBrainRequest = {
    
} & CreateBrainProperties

/**
 * Request parameters for declineInvitation operation in BrainApi.
 * @export
 * @interface BrainApiDeclineInvitationRequest
 */
export type BrainApiDeclineInvitationRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof BrainApiDeclineInvitation
    */
    readonly brainId: string
    
}

/**
 * Request parameters for getById operation in BrainApi.
 * @export
 * @interface BrainApiGetByIdRequest
 */
export type BrainApiGetByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof BrainApiGetById
    */
    readonly brainId: string
    
}

/**
 * Request parameters for getQuestionContext operation in BrainApi.
 * @export
 * @interface BrainApiGetQuestionContextRequest
 */
export type BrainApiGetQuestionContextRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof BrainApiGetQuestionContext
    */
    readonly brainId: string
    
} & BrainQuestionRequest

/**
 * Request parameters for getUsers operation in BrainApi.
 * @export
 * @interface BrainApiGetUsersRequest
 */
export type BrainApiGetUsersRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof BrainApiGetUsers
    */
    readonly brainId: string
    
}

/**
 * Request parameters for removeUserSubscription operation in BrainApi.
 * @export
 * @interface BrainApiRemoveUserSubscriptionRequest
 */
export type BrainApiRemoveUserSubscriptionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof BrainApiRemoveUserSubscription
    */
    readonly brainId: string
    
}

/**
 * Request parameters for setDefault operation in BrainApi.
 * @export
 * @interface BrainApiSetDefaultRequest
 */
export type BrainApiSetDefaultRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof BrainApiSetDefault
    */
    readonly brainId: string
    
}

/**
 * Request parameters for updateConfiguration operation in BrainApi.
 * @export
 * @interface BrainApiUpdateConfigurationRequest
 */
export type BrainApiUpdateConfigurationRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof BrainApiUpdateConfiguration
    */
    readonly brainId: string
    
} & BrainUpdatableProperties

/**
 * Request parameters for updateSecretsValues operation in BrainApi.
 * @export
 * @interface BrainApiUpdateSecretsValuesRequest
 */
export type BrainApiUpdateSecretsValuesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof BrainApiUpdateSecretsValues
    */
    readonly brainId: string
    
} & { [key: string]: string; }

/**
 * Request parameters for updateSubscription operation in BrainApi.
 * @export
 * @interface BrainApiUpdateSubscriptionRequest
 */
export type BrainApiUpdateSubscriptionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof BrainApiUpdateSubscription
    */
    readonly brainId: string
    
} & BrainSubscriptionUpdatableProperties

/**
 * BrainApiGenerated - object-oriented interface
 * @export
 * @class BrainApiGenerated
 * @extends {BaseAPI}
 */
export class BrainApiGenerated extends BaseAPI {
    /**
     * Accept an invitation to a brain for a user. This function removes the invitation from the subscription invitations and adds the user to the brain users.
     * @summary Accept Invitation
     * @param {BrainApiAcceptInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrainApiGenerated
     */
    public acceptInvitation(requestParameters: BrainApiAcceptInvitationRequest, options?: AxiosRequestConfig) {
        return BrainApiFp(this.configuration).acceptInvitation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new brain for the user.
     * @summary Create New Brain
     * @param {BrainApiCreateNewBrainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrainApiGenerated
     */
    public createNewBrain(requestParameters: BrainApiCreateNewBrainRequest, options?: AxiosRequestConfig) {
        return BrainApiFp(this.configuration).createNewBrain(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Decline an invitation to a brain for a user. This function removes the invitation from the subscription invitations.
     * @summary Decline Invitation
     * @param {BrainApiDeclineInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrainApiGenerated
     */
    public declineInvitation(requestParameters: BrainApiDeclineInvitationRequest, options?: AxiosRequestConfig) {
        return BrainApiFp(this.configuration).declineInvitation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all brains for the current user.
     * @summary Retrieve All Brains For User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrainApiGenerated
     */
    public getAllForUser(options?: AxiosRequestConfig) {
        return BrainApiFp(this.configuration).getAllForUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all Quivr public brains.
     * @summary Retrieve Public Brains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrainApiGenerated
     */
    public getAllPublic(options?: AxiosRequestConfig) {
        return BrainApiFp(this.configuration).getAllPublic(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve details of a specific brain by its ID.
     * @summary Retrieve Brain By Id
     * @param {BrainApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrainApiGenerated
     */
    public getById(requestParameters: BrainApiGetByIdRequest, options?: AxiosRequestConfig) {
        return BrainApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve or create the default brain for the current user.
     * @summary Retrieve Default Brain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrainApiGenerated
     */
    public getDefaultBrain(options?: AxiosRequestConfig) {
        return BrainApiFp(this.configuration).getDefaultBrain(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the integration brain description.
     * @summary Get Integration Brain Description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrainApiGenerated
     */
    public getDescription(options?: AxiosRequestConfig) {
        return BrainApiFp(this.configuration).getDescription(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the question context from a specific brain.
     * @summary Get Question Context For Brain
     * @param {BrainApiGetQuestionContextRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrainApiGenerated
     */
    public getQuestionContext(requestParameters: BrainApiGetQuestionContextRequest, options?: AxiosRequestConfig) {
        return BrainApiFp(this.configuration).getQuestionContext(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all users for a brain
     * @summary Get Users With Brain Access
     * @param {BrainApiGetUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrainApiGenerated
     */
    public getUsers(requestParameters: BrainApiGetUsersRequest, options?: AxiosRequestConfig) {
        return BrainApiFp(this.configuration).getUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a user\'s subscription to a brain
     * @summary Remove User Subscription
     * @param {BrainApiRemoveUserSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrainApiGenerated
     */
    public removeUserSubscription(requestParameters: BrainApiRemoveUserSubscriptionRequest, options?: AxiosRequestConfig) {
        return BrainApiFp(this.configuration).removeUserSubscription(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set a brain as the default for the current user.
     * @summary Set Brain As Default
     * @param {BrainApiSetDefaultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrainApiGenerated
     */
    public setDefault(requestParameters: BrainApiSetDefaultRequest, options?: AxiosRequestConfig) {
        return BrainApiFp(this.configuration).setDefault(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing brain\'s configuration.
     * @summary Update Existing Brain
     * @param {BrainApiUpdateConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrainApiGenerated
     */
    public updateConfiguration(requestParameters: BrainApiUpdateConfigurationRequest, options?: AxiosRequestConfig) {
        return BrainApiFp(this.configuration).updateConfiguration(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing brain\'s secrets.
     * @summary Update Existing Brain Secrets
     * @param {BrainApiUpdateSecretsValuesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrainApiGenerated
     */
    public updateSecretsValues(requestParameters: BrainApiUpdateSecretsValuesRequest, options?: AxiosRequestConfig) {
        return BrainApiFp(this.configuration).updateSecretsValues(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Brain Subscription
     * @param {BrainApiUpdateSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrainApiGenerated
     */
    public updateSubscription(requestParameters: BrainApiUpdateSubscriptionRequest, options?: AxiosRequestConfig) {
        return BrainApiFp(this.configuration).updateSubscription(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
