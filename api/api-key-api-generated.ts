/* tslint:disable */
/* eslint-disable */
/*
FastAPI

Open-source RAG Framework

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiKey } from '../models';
// @ts-ignore
import { ApiKeyInfo } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ApiKeyApi - axios parameter creator
 * @export
 */
export const ApiKeyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new API key for the current user.  - `current_user`: The current authenticated user. - Returns the newly created API key.  This endpoint generates a new API key for the current user. The API key is stored in the database and associated with the user. It returns the newly created API key.
         * @summary Create Api Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewKey: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-key`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api-key',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete (deactivate) an API key for the current user.  - `key_id`: The ID of the API key to delete.  This endpoint deactivates and deletes the specified API key associated with the current user. The API key is marked as inactive in the database.
         * @summary Delete Api Key
         * @param {string} keyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKey: async (keyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyId' is not null or undefined
            assertParamExists('deleteKey', 'keyId', keyId)
            const localVarPath = `/api-key/{key_id}`
                .replace(`{${"key_id"}}`, encodeURIComponent(String(keyId !== undefined ? keyId : `-key_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api-key/{key_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all active API keys for the current user.  - `current_user`: The current authenticated user. - Returns a list of active API keys with their IDs and creation times.  This endpoint retrieves all the active API keys associated with the current user. It returns a list of API key objects containing the key ID and creation time for each API key.
         * @summary Get Api Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api-keys',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiKeyApi - functional programming interface
 * @export
 */
export const ApiKeyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiKeyApiAxiosParamCreator(configuration)
    return {
        /**
         * Create new API key for the current user.  - `current_user`: The current authenticated user. - Returns the newly created API key.  This endpoint generates a new API key for the current user. The API key is stored in the database and associated with the user. It returns the newly created API key.
         * @summary Create Api Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewKey(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewKey(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete (deactivate) an API key for the current user.  - `key_id`: The ID of the API key to delete.  This endpoint deactivates and deletes the specified API key associated with the current user. The API key is marked as inactive in the database.
         * @summary Delete Api Key
         * @param {ApiKeyApiDeleteKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteKey(requestParameters: ApiKeyApiDeleteKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteKey(requestParameters.keyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all active API keys for the current user.  - `current_user`: The current authenticated user. - Returns a list of active API keys with their IDs and creation times.  This endpoint retrieves all the active API keys associated with the current user. It returns a list of API key objects containing the key ID and creation time for each API key.
         * @summary Get Api Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiKeyInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApiKeyApi - factory interface
 * @export
 */
export const ApiKeyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiKeyApiFp(configuration)
    return {
        /**
         * Create new API key for the current user.  - `current_user`: The current authenticated user. - Returns the newly created API key.  This endpoint generates a new API key for the current user. The API key is stored in the database and associated with the user. It returns the newly created API key.
         * @summary Create Api Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewKey(options?: AxiosRequestConfig): AxiosPromise<ApiKey> {
            return localVarFp.createNewKey(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete (deactivate) an API key for the current user.  - `key_id`: The ID of the API key to delete.  This endpoint deactivates and deletes the specified API key associated with the current user. The API key is marked as inactive in the database.
         * @summary Delete Api Key
         * @param {ApiKeyApiDeleteKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKey(requestParameters: ApiKeyApiDeleteKeyRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteKey(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all active API keys for the current user.  - `current_user`: The current authenticated user. - Returns a list of active API keys with their IDs and creation times.  This endpoint retrieves all the active API keys associated with the current user. It returns a list of API key objects containing the key ID and creation time for each API key.
         * @summary Get Api Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(options?: AxiosRequestConfig): AxiosPromise<Array<ApiKeyInfo>> {
            return localVarFp.getList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteKey operation in ApiKeyApi.
 * @export
 * @interface ApiKeyApiDeleteKeyRequest
 */
export type ApiKeyApiDeleteKeyRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ApiKeyApiDeleteKey
    */
    readonly keyId: string
    
}

/**
 * ApiKeyApiGenerated - object-oriented interface
 * @export
 * @class ApiKeyApiGenerated
 * @extends {BaseAPI}
 */
export class ApiKeyApiGenerated extends BaseAPI {
    /**
     * Create new API key for the current user.  - `current_user`: The current authenticated user. - Returns the newly created API key.  This endpoint generates a new API key for the current user. The API key is stored in the database and associated with the user. It returns the newly created API key.
     * @summary Create Api Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApiGenerated
     */
    public createNewKey(options?: AxiosRequestConfig) {
        return ApiKeyApiFp(this.configuration).createNewKey(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete (deactivate) an API key for the current user.  - `key_id`: The ID of the API key to delete.  This endpoint deactivates and deletes the specified API key associated with the current user. The API key is marked as inactive in the database.
     * @summary Delete Api Key
     * @param {ApiKeyApiDeleteKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApiGenerated
     */
    public deleteKey(requestParameters: ApiKeyApiDeleteKeyRequest, options?: AxiosRequestConfig) {
        return ApiKeyApiFp(this.configuration).deleteKey(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all active API keys for the current user.  - `current_user`: The current authenticated user. - Returns a list of active API keys with their IDs and creation times.  This endpoint retrieves all the active API keys associated with the current user. It returns a list of API key objects containing the key ID and creation time for each API key.
     * @summary Get Api Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApiGenerated
     */
    public getList(options?: AxiosRequestConfig) {
        return ApiKeyApiFp(this.configuration).getList(options).then((request) => request(this.axios, this.basePath));
    }
}
