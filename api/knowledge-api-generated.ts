/* tslint:disable */
/* eslint-disable */
/*
FastAPI

Open-source RAG Framework

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * KnowledgeApi - axios parameter creator
 * @export
 */
export const KnowledgeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a specific knowledge from a brain.
         * @summary Delete Endpoint
         * @param {string} knowledgeId 
         * @param {string} brainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpecificBrainKnowledge: async (knowledgeId: string, brainId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'knowledgeId' is not null or undefined
            assertParamExists('deleteSpecificBrainKnowledge', 'knowledgeId', knowledgeId)
            // verify required parameter 'brainId' is not null or undefined
            assertParamExists('deleteSpecificBrainKnowledge', 'brainId', brainId)
            const localVarPath = `/knowledge/{knowledge_id}`
                .replace(`{${"knowledge_id"}}`, encodeURIComponent(String(knowledgeId !== undefined ? knowledgeId : `-knowledge_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (brainId !== undefined) {
                localVarQueryParameter['brain_id'] = brainId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge/{knowledge_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a signed url to download the file from storage.
         * @summary Generate Signed Url Endpoint
         * @param {string} knowledgeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSignedUrl: async (knowledgeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'knowledgeId' is not null or undefined
            assertParamExists('generateSignedUrl', 'knowledgeId', knowledgeId)
            const localVarPath = `/knowledge/{knowledge_id}/signed_download_url`
                .replace(`{${"knowledge_id"}}`, encodeURIComponent(String(knowledgeId !== undefined ? knowledgeId : `-knowledge_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge/{knowledge_id}/signed_download_url',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve and list all the knowledge in a brain.
         * @summary List Knowledge In Brain Endpoint
         * @param {string} brainId The ID of the brain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllKnowledge: async (brainId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brainId' is not null or undefined
            assertParamExists('getAllKnowledge', 'brainId', brainId)
            const localVarPath = `/knowledge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (brainId !== undefined) {
                localVarQueryParameter['brain_id'] = brainId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/knowledge',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KnowledgeApi - functional programming interface
 * @export
 */
export const KnowledgeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KnowledgeApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a specific knowledge from a brain.
         * @summary Delete Endpoint
         * @param {KnowledgeApiDeleteSpecificBrainKnowledgeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSpecificBrainKnowledge(requestParameters: KnowledgeApiDeleteSpecificBrainKnowledgeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSpecificBrainKnowledge(requestParameters.knowledgeId, requestParameters.brainId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generate a signed url to download the file from storage.
         * @summary Generate Signed Url Endpoint
         * @param {KnowledgeApiGenerateSignedUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateSignedUrl(requestParameters: KnowledgeApiGenerateSignedUrlRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateSignedUrl(requestParameters.knowledgeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve and list all the knowledge in a brain.
         * @summary List Knowledge In Brain Endpoint
         * @param {KnowledgeApiGetAllKnowledgeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllKnowledge(requestParameters: KnowledgeApiGetAllKnowledgeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllKnowledge(requestParameters.brainId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * KnowledgeApi - factory interface
 * @export
 */
export const KnowledgeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KnowledgeApiFp(configuration)
    return {
        /**
         * Delete a specific knowledge from a brain.
         * @summary Delete Endpoint
         * @param {KnowledgeApiDeleteSpecificBrainKnowledgeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpecificBrainKnowledge(requestParameters: KnowledgeApiDeleteSpecificBrainKnowledgeRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteSpecificBrainKnowledge(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a signed url to download the file from storage.
         * @summary Generate Signed Url Endpoint
         * @param {KnowledgeApiGenerateSignedUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSignedUrl(requestParameters: KnowledgeApiGenerateSignedUrlRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.generateSignedUrl(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve and list all the knowledge in a brain.
         * @summary List Knowledge In Brain Endpoint
         * @param {KnowledgeApiGetAllKnowledgeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllKnowledge(requestParameters: KnowledgeApiGetAllKnowledgeRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getAllKnowledge(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteSpecificBrainKnowledge operation in KnowledgeApi.
 * @export
 * @interface KnowledgeApiDeleteSpecificBrainKnowledgeRequest
 */
export type KnowledgeApiDeleteSpecificBrainKnowledgeRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof KnowledgeApiDeleteSpecificBrainKnowledge
    */
    readonly knowledgeId: string
    
    /**
    * 
    * @type {string}
    * @memberof KnowledgeApiDeleteSpecificBrainKnowledge
    */
    readonly brainId: string
    
}

/**
 * Request parameters for generateSignedUrl operation in KnowledgeApi.
 * @export
 * @interface KnowledgeApiGenerateSignedUrlRequest
 */
export type KnowledgeApiGenerateSignedUrlRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof KnowledgeApiGenerateSignedUrl
    */
    readonly knowledgeId: string
    
}

/**
 * Request parameters for getAllKnowledge operation in KnowledgeApi.
 * @export
 * @interface KnowledgeApiGetAllKnowledgeRequest
 */
export type KnowledgeApiGetAllKnowledgeRequest = {
    
    /**
    * The ID of the brain
    * @type {string}
    * @memberof KnowledgeApiGetAllKnowledge
    */
    readonly brainId: string
    
}

/**
 * KnowledgeApiGenerated - object-oriented interface
 * @export
 * @class KnowledgeApiGenerated
 * @extends {BaseAPI}
 */
export class KnowledgeApiGenerated extends BaseAPI {
    /**
     * Delete a specific knowledge from a brain.
     * @summary Delete Endpoint
     * @param {KnowledgeApiDeleteSpecificBrainKnowledgeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeApiGenerated
     */
    public deleteSpecificBrainKnowledge(requestParameters: KnowledgeApiDeleteSpecificBrainKnowledgeRequest, options?: AxiosRequestConfig) {
        return KnowledgeApiFp(this.configuration).deleteSpecificBrainKnowledge(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a signed url to download the file from storage.
     * @summary Generate Signed Url Endpoint
     * @param {KnowledgeApiGenerateSignedUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeApiGenerated
     */
    public generateSignedUrl(requestParameters: KnowledgeApiGenerateSignedUrlRequest, options?: AxiosRequestConfig) {
        return KnowledgeApiFp(this.configuration).generateSignedUrl(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve and list all the knowledge in a brain.
     * @summary List Knowledge In Brain Endpoint
     * @param {KnowledgeApiGetAllKnowledgeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeApiGenerated
     */
    public getAllKnowledge(requestParameters: KnowledgeApiGetAllKnowledgeRequest, options?: AxiosRequestConfig) {
        return KnowledgeApiFp(this.configuration).getAllKnowledge(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
