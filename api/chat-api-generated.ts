/* tslint:disable */
/* eslint-disable */
/*
FastAPI

Open-source RAG Framework

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ChatItem } from '../models';
// @ts-ignore
import { ChatMessageProperties } from '../models';
// @ts-ignore
import { ChatNullable } from '../models';
// @ts-ignore
import { ChatQuestion } from '../models';
// @ts-ignore
import { ChatUpdatableProperties } from '../models';
// @ts-ignore
import { CreateChatProperties } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { QuestionAndAnswer } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ChatApi - axios parameter creator
 * @export
 */
export const ChatApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a new question and anwser to the chat.
         * @summary Add Question And Answer Handler
         * @param {string} chatId 
         * @param {QuestionAndAnswer} questionAndAnswer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQuestionAndAnswer: async (chatId: string, questionAndAnswer: QuestionAndAnswer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('addQuestionAndAnswer', 'chatId', chatId)
            // verify required parameter 'questionAndAnswer' is not null or undefined
            assertParamExists('addQuestionAndAnswer', 'questionAndAnswer', questionAndAnswer)
            const localVarPath = `/chat/{chat_id}/question/answer`
                .replace(`{${"chat_id"}}`, encodeURIComponent(String(chatId !== undefined ? chatId : `-chat_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: questionAndAnswer,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/chat/{chat_id}/question/answer',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(questionAndAnswer, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new chat with initial chat messages.
         * @summary Create Chat Handler
         * @param {CreateChatProperties} createChatProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHandler: async (createChatProperties: CreateChatProperties, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createChatProperties' is not null or undefined
            assertParamExists('createHandler', 'createChatProperties', createChatProperties)
            const localVarPath = `/chat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createChatProperties,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/chat',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createChatProperties, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Stream Question Handler
         * @param {string} chatId 
         * @param {ChatQuestion} chatQuestion 
         * @param {string} [brainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStreamQuestionHandler: async (chatId: string, chatQuestion: ChatQuestion, brainId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('createStreamQuestionHandler', 'chatId', chatId)
            // verify required parameter 'chatQuestion' is not null or undefined
            assertParamExists('createStreamQuestionHandler', 'chatQuestion', chatQuestion)
            const localVarPath = `/chat/{chat_id}/question/stream`
                .replace(`{${"chat_id"}}`, encodeURIComponent(String(chatId !== undefined ? chatId : `-chat_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (brainId !== undefined) {
                localVarQueryParameter['brain_id'] = brainId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: chatQuestion,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/chat/{chat_id}/question/stream',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(chatQuestion, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific chat by chat ID.
         * @summary Delete Chat
         * @param {string} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChatById: async (chatId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('deleteChatById', 'chatId', chatId)
            const localVarPath = `/chat/{chat_id}`
                .replace(`{${"chat_id"}}`, encodeURIComponent(String(chatId !== undefined ? chatId : `-chat_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/chat/{chat_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all chats for the current user.  - `current_user`: The current authenticated user. - Returns a list of all chats for the user.  This endpoint retrieves all the chats associated with the current authenticated user. It returns a list of chat objects containing the chat ID and chat name for each chat.
         * @summary Get Chats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllChats: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/chat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/chat',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Chat History Handler
         * @param {string} chatId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistory: async (chatId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('getHistory', 'chatId', chatId)
            const localVarPath = `/chat/{chat_id}/history`
                .replace(`{${"chat_id"}}`, encodeURIComponent(String(chatId !== undefined ? chatId : `-chat_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/chat/{chat_id}/history',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Question Handler
         * @param {string} chatId 
         * @param {ChatQuestion} chatQuestion 
         * @param {string} [brainId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleQuestion: async (chatId: string, chatQuestion: ChatQuestion, brainId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('handleQuestion', 'chatId', chatId)
            // verify required parameter 'chatQuestion' is not null or undefined
            assertParamExists('handleQuestion', 'chatQuestion', chatQuestion)
            const localVarPath = `/chat/{chat_id}/question`
                .replace(`{${"chat_id"}}`, encodeURIComponent(String(chatId !== undefined ? chatId : `-chat_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (brainId !== undefined) {
                localVarQueryParameter['brain_id'] = brainId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: chatQuestion,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/chat/{chat_id}/question',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(chatQuestion, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Chat Message
         * @param {string} chatId 
         * @param {string} messageId 
         * @param {ChatMessageProperties} chatMessageProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessage: async (chatId: string, messageId: string, chatMessageProperties: ChatMessageProperties, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('updateMessage', 'chatId', chatId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('updateMessage', 'messageId', messageId)
            // verify required parameter 'chatMessageProperties' is not null or undefined
            assertParamExists('updateMessage', 'chatMessageProperties', chatMessageProperties)
            const localVarPath = `/chat/{chat_id}/{message_id}`
                .replace(`{${"chat_id"}}`, encodeURIComponent(String(chatId !== undefined ? chatId : `-chat_id-`)))
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId !== undefined ? messageId : `-message_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: chatMessageProperties,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/chat/{chat_id}/{message_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(chatMessageProperties, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update chat attributes
         * @summary Update Chat Metadata Handler
         * @param {string} chatId 
         * @param {ChatUpdatableProperties} chatUpdatableProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMetadataHandler: async (chatId: string, chatUpdatableProperties: ChatUpdatableProperties, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('updateMetadataHandler', 'chatId', chatId)
            // verify required parameter 'chatUpdatableProperties' is not null or undefined
            assertParamExists('updateMetadataHandler', 'chatUpdatableProperties', chatUpdatableProperties)
            const localVarPath = `/chat/{chat_id}/metadata`
                .replace(`{${"chat_id"}}`, encodeURIComponent(String(chatId !== undefined ? chatId : `-chat_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: chatUpdatableProperties,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/chat/{chat_id}/metadata',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(chatUpdatableProperties, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatApi - functional programming interface
 * @export
 */
export const ChatApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a new question and anwser to the chat.
         * @summary Add Question And Answer Handler
         * @param {ChatApiAddQuestionAndAnswerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addQuestionAndAnswer(requestParameters: ChatApiAddQuestionAndAnswerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatNullable>> {
            const questionAndAnswer: QuestionAndAnswer = {
                question: requestParameters.question,
                answer: requestParameters.answer
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addQuestionAndAnswer(requestParameters.chatId, questionAndAnswer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new chat with initial chat messages.
         * @summary Create Chat Handler
         * @param {ChatApiCreateHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createHandler(requestParameters: ChatApiCreateHandlerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const createChatProperties: CreateChatProperties = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createHandler(createChatProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Stream Question Handler
         * @param {ChatApiCreateStreamQuestionHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStreamQuestionHandler(requestParameters: ChatApiCreateStreamQuestionHandlerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const chatQuestion: ChatQuestion = {
                question: requestParameters.requestBody.question,
                model: requestParameters.requestBody.model,
                temperature: requestParameters.requestBody.temperature,
                max_tokens: requestParameters.requestBody.max_tokens,
                brain_id: requestParameters.requestBody.brain_id,
                prompt_id: requestParameters.requestBody.prompt_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createStreamQuestionHandler(requestParameters.chatId, chatQuestion, requestParameters.brainId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a specific chat by chat ID.
         * @summary Delete Chat
         * @param {ChatApiDeleteChatByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChatById(requestParameters: ChatApiDeleteChatByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteChatById(requestParameters.chatId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all chats for the current user.  - `current_user`: The current authenticated user. - Returns a list of all chats for the user.  This endpoint retrieves all the chats associated with the current authenticated user. It returns a list of chat objects containing the chat ID and chat name for each chat.
         * @summary Get Chats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllChats(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllChats(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Chat History Handler
         * @param {ChatApiGetHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistory(requestParameters: ChatApiGetHistoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChatItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHistory(requestParameters.chatId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Question Handler
         * @param {ChatApiHandleQuestionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleQuestion(requestParameters: ChatApiHandleQuestionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const chatQuestion: ChatQuestion = {
                question: requestParameters.requestBody.question,
                model: requestParameters.requestBody.model,
                temperature: requestParameters.requestBody.temperature,
                max_tokens: requestParameters.requestBody.max_tokens,
                brain_id: requestParameters.requestBody.brain_id,
                prompt_id: requestParameters.requestBody.prompt_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.handleQuestion(requestParameters.chatId, chatQuestion, requestParameters.brainId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Chat Message
         * @param {ChatApiUpdateMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMessage(requestParameters: ChatApiUpdateMessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const chatMessageProperties: ChatMessageProperties = {
                thumbs: requestParameters.thumbs
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMessage(requestParameters.chatId, requestParameters.messageId, chatMessageProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update chat attributes
         * @summary Update Chat Metadata Handler
         * @param {ChatApiUpdateMetadataHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMetadataHandler(requestParameters: ChatApiUpdateMetadataHandlerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const chatUpdatableProperties: ChatUpdatableProperties = {
                chat_name: requestParameters.chat_name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMetadataHandler(requestParameters.chatId, chatUpdatableProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChatApi - factory interface
 * @export
 */
export const ChatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatApiFp(configuration)
    return {
        /**
         * Add a new question and anwser to the chat.
         * @summary Add Question And Answer Handler
         * @param {ChatApiAddQuestionAndAnswerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQuestionAndAnswer(requestParameters: ChatApiAddQuestionAndAnswerRequest, options?: AxiosRequestConfig): AxiosPromise<ChatNullable> {
            return localVarFp.addQuestionAndAnswer(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new chat with initial chat messages.
         * @summary Create Chat Handler
         * @param {ChatApiCreateHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHandler(requestParameters: ChatApiCreateHandlerRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createHandler(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Stream Question Handler
         * @param {ChatApiCreateStreamQuestionHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStreamQuestionHandler(requestParameters: ChatApiCreateStreamQuestionHandlerRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createStreamQuestionHandler(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific chat by chat ID.
         * @summary Delete Chat
         * @param {ChatApiDeleteChatByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChatById(requestParameters: ChatApiDeleteChatByIdRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteChatById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all chats for the current user.  - `current_user`: The current authenticated user. - Returns a list of all chats for the user.  This endpoint retrieves all the chats associated with the current authenticated user. It returns a list of chat objects containing the chat ID and chat name for each chat.
         * @summary Get Chats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllChats(options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getAllChats(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Chat History Handler
         * @param {ChatApiGetHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistory(requestParameters: ChatApiGetHistoryRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ChatItem>> {
            return localVarFp.getHistory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Question Handler
         * @param {ChatApiHandleQuestionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleQuestion(requestParameters: ChatApiHandleQuestionRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.handleQuestion(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Chat Message
         * @param {ChatApiUpdateMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessage(requestParameters: ChatApiUpdateMessageRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateMessage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update chat attributes
         * @summary Update Chat Metadata Handler
         * @param {ChatApiUpdateMetadataHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMetadataHandler(requestParameters: ChatApiUpdateMetadataHandlerRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateMetadataHandler(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addQuestionAndAnswer operation in ChatApi.
 * @export
 * @interface ChatApiAddQuestionAndAnswerRequest
 */
export type ChatApiAddQuestionAndAnswerRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ChatApiAddQuestionAndAnswer
    */
    readonly chatId: string
    
} & QuestionAndAnswer

/**
 * Request parameters for createHandler operation in ChatApi.
 * @export
 * @interface ChatApiCreateHandlerRequest
 */
export type ChatApiCreateHandlerRequest = {
    
} & CreateChatProperties

/**
 * Request parameters for createStreamQuestionHandler operation in ChatApi.
 * @export
 * @interface ChatApiCreateStreamQuestionHandlerRequest
 */
export type ChatApiCreateStreamQuestionHandlerRequest = {
    /**
    * 
    * @type {string}
    * @memberof ChatApiCreateStreamQuestionHandler
    */
    readonly chatId: string
    /**
    * 
    * @type {ChatQuestion}
    * @memberof ChatApiCreateStreamQuestionHandler
    */
    readonly requestBody: ChatQuestion
    /**
    * 
    * @type {string}
    * @memberof ChatApiCreateStreamQuestionHandler
    */
    readonly brainId?: string
}

/**
 * Request parameters for deleteChatById operation in ChatApi.
 * @export
 * @interface ChatApiDeleteChatByIdRequest
 */
export type ChatApiDeleteChatByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ChatApiDeleteChatById
    */
    readonly chatId: string
    
}

/**
 * Request parameters for getHistory operation in ChatApi.
 * @export
 * @interface ChatApiGetHistoryRequest
 */
export type ChatApiGetHistoryRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ChatApiGetHistory
    */
    readonly chatId: string
    
}

/**
 * Request parameters for handleQuestion operation in ChatApi.
 * @export
 * @interface ChatApiHandleQuestionRequest
 */
export type ChatApiHandleQuestionRequest = {
    /**
    * 
    * @type {string}
    * @memberof ChatApiHandleQuestion
    */
    readonly chatId: string
    /**
    * 
    * @type {ChatQuestion}
    * @memberof ChatApiHandleQuestion
    */
    readonly requestBody: ChatQuestion
    /**
    * 
    * @type {string}
    * @memberof ChatApiHandleQuestion
    */
    readonly brainId?: string
}

/**
 * Request parameters for updateMessage operation in ChatApi.
 * @export
 * @interface ChatApiUpdateMessageRequest
 */
export type ChatApiUpdateMessageRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ChatApiUpdateMessage
    */
    readonly chatId: string
    
    /**
    * 
    * @type {string}
    * @memberof ChatApiUpdateMessage
    */
    readonly messageId: string
    
} & ChatMessageProperties

/**
 * Request parameters for updateMetadataHandler operation in ChatApi.
 * @export
 * @interface ChatApiUpdateMetadataHandlerRequest
 */
export type ChatApiUpdateMetadataHandlerRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ChatApiUpdateMetadataHandler
    */
    readonly chatId: string
    
} & ChatUpdatableProperties

/**
 * ChatApiGenerated - object-oriented interface
 * @export
 * @class ChatApiGenerated
 * @extends {BaseAPI}
 */
export class ChatApiGenerated extends BaseAPI {
    /**
     * Add a new question and anwser to the chat.
     * @summary Add Question And Answer Handler
     * @param {ChatApiAddQuestionAndAnswerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiGenerated
     */
    public addQuestionAndAnswer(requestParameters: ChatApiAddQuestionAndAnswerRequest, options?: AxiosRequestConfig) {
        return ChatApiFp(this.configuration).addQuestionAndAnswer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new chat with initial chat messages.
     * @summary Create Chat Handler
     * @param {ChatApiCreateHandlerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiGenerated
     */
    public createHandler(requestParameters: ChatApiCreateHandlerRequest, options?: AxiosRequestConfig) {
        return ChatApiFp(this.configuration).createHandler(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Stream Question Handler
     * @param {ChatApiCreateStreamQuestionHandlerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiGenerated
     */
    public createStreamQuestionHandler(requestParameters: ChatApiCreateStreamQuestionHandlerRequest, options?: AxiosRequestConfig) {
        return ChatApiFp(this.configuration).createStreamQuestionHandler(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a specific chat by chat ID.
     * @summary Delete Chat
     * @param {ChatApiDeleteChatByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiGenerated
     */
    public deleteChatById(requestParameters: ChatApiDeleteChatByIdRequest, options?: AxiosRequestConfig) {
        return ChatApiFp(this.configuration).deleteChatById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all chats for the current user.  - `current_user`: The current authenticated user. - Returns a list of all chats for the user.  This endpoint retrieves all the chats associated with the current authenticated user. It returns a list of chat objects containing the chat ID and chat name for each chat.
     * @summary Get Chats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiGenerated
     */
    public getAllChats(options?: AxiosRequestConfig) {
        return ChatApiFp(this.configuration).getAllChats(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Chat History Handler
     * @param {ChatApiGetHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiGenerated
     */
    public getHistory(requestParameters: ChatApiGetHistoryRequest, options?: AxiosRequestConfig) {
        return ChatApiFp(this.configuration).getHistory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Question Handler
     * @param {ChatApiHandleQuestionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiGenerated
     */
    public handleQuestion(requestParameters: ChatApiHandleQuestionRequest, options?: AxiosRequestConfig) {
        return ChatApiFp(this.configuration).handleQuestion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Chat Message
     * @param {ChatApiUpdateMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiGenerated
     */
    public updateMessage(requestParameters: ChatApiUpdateMessageRequest, options?: AxiosRequestConfig) {
        return ChatApiFp(this.configuration).updateMessage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update chat attributes
     * @summary Update Chat Metadata Handler
     * @param {ChatApiUpdateMetadataHandlerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiGenerated
     */
    public updateMetadataHandler(requestParameters: ChatApiUpdateMetadataHandlerRequest, options?: AxiosRequestConfig) {
        return ChatApiFp(this.configuration).updateMetadataHandler(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
