/* tslint:disable */
/* eslint-disable */
/*
FastAPI

Open-source RAG Framework

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SubscriptionApi - axios parameter creator
 * @export
 */
export const SubscriptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Subscribe to a public brain
         * @summary Subscribe To Brain Handler
         * @param {string} brainId 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brainHandler: async (brainId: string, body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brainId' is not null or undefined
            assertParamExists('brainHandler', 'brainId', brainId)
            const localVarPath = `/brains/{brain_id}/subscribe`
                .replace(`{${"brain_id"}}`, encodeURIComponent(String(brainId !== undefined ? brainId : `-brain_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/brains/{brain_id}/subscribe',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unsubscribe from a brain
         * @summary Unsubscribe From Brain Handler
         * @param {string} brainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unregisterHandler: async (brainId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brainId' is not null or undefined
            assertParamExists('unregisterHandler', 'brainId', brainId)
            const localVarPath = `/brains/{brain_id}/unsubscribe`
                .replace(`{${"brain_id"}}`, encodeURIComponent(String(brainId !== undefined ? brainId : `-brain_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/brains/{brain_id}/unsubscribe',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubscriptionApi - functional programming interface
 * @export
 */
export const SubscriptionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubscriptionApiAxiosParamCreator(configuration)
    return {
        /**
         * Subscribe to a public brain
         * @summary Subscribe To Brain Handler
         * @param {SubscriptionApiBrainHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brainHandler(requestParameters: SubscriptionApiBrainHandlerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const body: object = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.brainHandler(requestParameters.brainId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Unsubscribe from a brain
         * @summary Unsubscribe From Brain Handler
         * @param {SubscriptionApiUnregisterHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unregisterHandler(requestParameters: SubscriptionApiUnregisterHandlerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unregisterHandler(requestParameters.brainId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubscriptionApi - factory interface
 * @export
 */
export const SubscriptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubscriptionApiFp(configuration)
    return {
        /**
         * Subscribe to a public brain
         * @summary Subscribe To Brain Handler
         * @param {SubscriptionApiBrainHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brainHandler(requestParameters: SubscriptionApiBrainHandlerRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.brainHandler(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Unsubscribe from a brain
         * @summary Unsubscribe From Brain Handler
         * @param {SubscriptionApiUnregisterHandlerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unregisterHandler(requestParameters: SubscriptionApiUnregisterHandlerRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.unregisterHandler(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for brainHandler operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiBrainHandlerRequest
 */
export type SubscriptionApiBrainHandlerRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SubscriptionApiBrainHandler
    */
    readonly brainId: string
    
} & object

/**
 * Request parameters for unregisterHandler operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiUnregisterHandlerRequest
 */
export type SubscriptionApiUnregisterHandlerRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SubscriptionApiUnregisterHandler
    */
    readonly brainId: string
    
}

/**
 * SubscriptionApiGenerated - object-oriented interface
 * @export
 * @class SubscriptionApiGenerated
 * @extends {BaseAPI}
 */
export class SubscriptionApiGenerated extends BaseAPI {
    /**
     * Subscribe to a public brain
     * @summary Subscribe To Brain Handler
     * @param {SubscriptionApiBrainHandlerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApiGenerated
     */
    public brainHandler(requestParameters: SubscriptionApiBrainHandlerRequest, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).brainHandler(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unsubscribe from a brain
     * @summary Unsubscribe From Brain Handler
     * @param {SubscriptionApiUnregisterHandlerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApiGenerated
     */
    public unregisterHandler(requestParameters: SubscriptionApiUnregisterHandlerRequest, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).unregisterHandler(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
