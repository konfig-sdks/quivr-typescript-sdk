/* tslint:disable */
/* eslint-disable */
/*
FastAPI

Open-source RAG Framework

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BrainSubscriptionApi - axios parameter creator
 * @export
 */
export const BrainSubscriptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get an invitation to a brain for a user. This function checks if the user has been invited to the brain and returns the invitation status.
         * @summary Get User Invitation
         * @param {string} brainId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInvitation: async (brainId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brainId' is not null or undefined
            assertParamExists('getUserInvitation', 'brainId', brainId)
            const localVarPath = `/brains/{brain_id}/subscription`
                .replace(`{${"brain_id"}}`, encodeURIComponent(String(brainId !== undefined ? brainId : `-brain_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/brains/{brain_id}/subscription',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invite multiple users to a brain by their emails. This function creates or updates a brain subscription invitation for each user and sends an invitation email to each user.
         * @summary Invite Users To Brain
         * @param {string} brainId 
         * @param {Array<object>} requestBody 
         * @param {string} [origin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteUsersToBrain: async (brainId: string, requestBody: Array<object>, origin?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brainId' is not null or undefined
            assertParamExists('inviteUsersToBrain', 'brainId', brainId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('inviteUsersToBrain', 'requestBody', requestBody)
            const localVarPath = `/brains/{brain_id}/subscription`
                .replace(`{${"brain_id"}}`, encodeURIComponent(String(brainId !== undefined ? brainId : `-brain_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (origin != null) {
                localVarHeaderParameter['origin'] = String(origin);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: requestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/brains/{brain_id}/subscription',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BrainSubscriptionApi - functional programming interface
 * @export
 */
export const BrainSubscriptionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BrainSubscriptionApiAxiosParamCreator(configuration)
    return {
        /**
         * Get an invitation to a brain for a user. This function checks if the user has been invited to the brain and returns the invitation status.
         * @summary Get User Invitation
         * @param {BrainSubscriptionApiGetUserInvitationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInvitation(requestParameters: BrainSubscriptionApiGetUserInvitationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserInvitation(requestParameters.brainId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Invite multiple users to a brain by their emails. This function creates or updates a brain subscription invitation for each user and sends an invitation email to each user.
         * @summary Invite Users To Brain
         * @param {BrainSubscriptionApiInviteUsersToBrainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteUsersToBrain(requestParameters: BrainSubscriptionApiInviteUsersToBrainRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const requestBody: Array<object> = requestParameters.requestBody;
            const localVarAxiosArgs = await localVarAxiosParamCreator.inviteUsersToBrain(requestParameters.brainId, requestBody, requestParameters.origin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BrainSubscriptionApi - factory interface
 * @export
 */
export const BrainSubscriptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BrainSubscriptionApiFp(configuration)
    return {
        /**
         * Get an invitation to a brain for a user. This function checks if the user has been invited to the brain and returns the invitation status.
         * @summary Get User Invitation
         * @param {BrainSubscriptionApiGetUserInvitationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInvitation(requestParameters: BrainSubscriptionApiGetUserInvitationRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getUserInvitation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Invite multiple users to a brain by their emails. This function creates or updates a brain subscription invitation for each user and sends an invitation email to each user.
         * @summary Invite Users To Brain
         * @param {BrainSubscriptionApiInviteUsersToBrainRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteUsersToBrain(requestParameters: BrainSubscriptionApiInviteUsersToBrainRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.inviteUsersToBrain(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getUserInvitation operation in BrainSubscriptionApi.
 * @export
 * @interface BrainSubscriptionApiGetUserInvitationRequest
 */
export type BrainSubscriptionApiGetUserInvitationRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof BrainSubscriptionApiGetUserInvitation
    */
    readonly brainId: string
    
}

/**
 * Request parameters for inviteUsersToBrain operation in BrainSubscriptionApi.
 * @export
 * @interface BrainSubscriptionApiInviteUsersToBrainRequest
 */
export type BrainSubscriptionApiInviteUsersToBrainRequest = {
    /**
    * 
    * @type {string}
    * @memberof BrainSubscriptionApiInviteUsersToBrain
    */
    readonly brainId: string
    /**
    * 
    * @type {Array<object>}
    * @memberof BrainSubscriptionApiInviteUsersToBrain
    */
    readonly requestBody: Array<object>
    /**
    * 
    * @type {string}
    * @memberof BrainSubscriptionApiInviteUsersToBrain
    */
    readonly origin?: string
}

/**
 * BrainSubscriptionApiGenerated - object-oriented interface
 * @export
 * @class BrainSubscriptionApiGenerated
 * @extends {BaseAPI}
 */
export class BrainSubscriptionApiGenerated extends BaseAPI {
    /**
     * Get an invitation to a brain for a user. This function checks if the user has been invited to the brain and returns the invitation status.
     * @summary Get User Invitation
     * @param {BrainSubscriptionApiGetUserInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrainSubscriptionApiGenerated
     */
    public getUserInvitation(requestParameters: BrainSubscriptionApiGetUserInvitationRequest, options?: AxiosRequestConfig) {
        return BrainSubscriptionApiFp(this.configuration).getUserInvitation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invite multiple users to a brain by their emails. This function creates or updates a brain subscription invitation for each user and sends an invitation email to each user.
     * @summary Invite Users To Brain
     * @param {BrainSubscriptionApiInviteUsersToBrainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrainSubscriptionApiGenerated
     */
    public inviteUsersToBrain(requestParameters: BrainSubscriptionApiInviteUsersToBrainRequest, options?: AxiosRequestConfig) {
        return BrainSubscriptionApiFp(this.configuration).inviteUsersToBrain(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
