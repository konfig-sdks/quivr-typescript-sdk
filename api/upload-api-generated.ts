/* tslint:disable */
/* eslint-disable */
/*
FastAPI

Open-source RAG Framework

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BodyUploadFileUploadPost } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UploadApi - axios parameter creator
 * @export
 */
export const UploadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Upload File
         * @param {string} brainId The ID of the brain
         * @param {Uint8Array | File | buffer.File} uploadFile 
         * @param {BodyUploadFileUploadPost} bodyUploadFileUploadPost 
         * @param {string} [chatId] The ID of the chat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filePost: async (brainId: string, uploadFile: Uint8Array | File | buffer.File, bodyUploadFileUploadPost: BodyUploadFileUploadPost, chatId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brainId' is not null or undefined
            assertParamExists('filePost', 'brainId', brainId)
            // verify required parameter 'uploadFile' is not null or undefined
            assertParamExists('filePost', 'uploadFile', uploadFile)
            // verify required parameter 'bodyUploadFileUploadPost' is not null or undefined
            assertParamExists('filePost', 'bodyUploadFileUploadPost', bodyUploadFileUploadPost)
            const localVarPath = `/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (brainId !== undefined) {
                localVarQueryParameter['brain_id'] = brainId;
            }

            if (chatId !== undefined) {
                localVarQueryParameter['chat_id'] = chatId;
            }


            if (uploadFile !== undefined) {
                await addFormParam('uploadFile', uploadFile, true, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: bodyUploadFileUploadPost,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/upload',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UploadApi - functional programming interface
 * @export
 */
export const UploadApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UploadApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Upload File
         * @param {UploadApiFilePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filePost(requestParameters: UploadApiFilePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const bodyUploadFileUploadPost: BodyUploadFileUploadPost = {
                uploadFile: requestParameters.uploadFile
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.filePost(requestParameters.brainId, requestParameters.uploadFile, bodyUploadFileUploadPost, requestParameters.chatId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UploadApi - factory interface
 * @export
 */
export const UploadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UploadApiFp(configuration)
    return {
        /**
         * 
         * @summary Upload File
         * @param {UploadApiFilePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filePost(requestParameters: UploadApiFilePostRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.filePost(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for filePost operation in UploadApi.
 * @export
 * @interface UploadApiFilePostRequest
 */
export type UploadApiFilePostRequest = {
    
    /**
    * The ID of the brain
    * @type {string}
    * @memberof UploadApiFilePost
    */
    readonly brainId: string
    
    /**
    * 
    * @type {Uint8Array | File | buffer.File}
    * @memberof UploadApiFilePost
    */
    readonly uploadFile: Uint8Array | File | buffer.File
    
    /**
    * The ID of the chat
    * @type {string}
    * @memberof UploadApiFilePost
    */
    readonly chatId?: string
    
} & BodyUploadFileUploadPost

/**
 * UploadApiGenerated - object-oriented interface
 * @export
 * @class UploadApiGenerated
 * @extends {BaseAPI}
 */
export class UploadApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Upload File
     * @param {UploadApiFilePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadApiGenerated
     */
    public filePost(requestParameters: UploadApiFilePostRequest, options?: AxiosRequestConfig) {
        return UploadApiFp(this.configuration).filePost(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
