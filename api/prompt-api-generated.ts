/* tslint:disable */
/* eslint-disable */
/*
FastAPI

Open-source RAG Framework

The version of the OpenAPI document: 0.1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreatePromptProperties } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { Prompt } from '../models';
// @ts-ignore
import { PromptNullable } from '../models';
// @ts-ignore
import { PromptStatusEnum } from '../models';
// @ts-ignore
import { PromptStatusEnumNullable } from '../models';
// @ts-ignore
import { PromptUpdatableProperties } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PromptApi - axios parameter creator
 * @export
 */
export const PromptApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a prompt by its id
         * @summary Create Prompt Route
         * @param {CreatePromptProperties} createPromptProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPromptById: async (createPromptProperties: CreatePromptProperties, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPromptProperties' is not null or undefined
            assertParamExists('createPromptById', 'createPromptProperties', createPromptProperties)
            const localVarPath = `/prompts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createPromptProperties,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/prompts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createPromptProperties, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all public prompt
         * @summary Get Prompts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPublicPrompts: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/prompts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/prompts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a prompt by its id
         * @summary Get Prompt
         * @param {string} promptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (promptId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promptId' is not null or undefined
            assertParamExists('getById', 'promptId', promptId)
            const localVarPath = `/prompts/{prompt_id}`
                .replace(`{${"prompt_id"}}`, encodeURIComponent(String(promptId !== undefined ? promptId : `-prompt_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/prompts/{prompt_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a prompt by its id
         * @summary Update Prompt
         * @param {string} promptId 
         * @param {PromptUpdatableProperties} promptUpdatableProperties 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById: async (promptId: string, promptUpdatableProperties: PromptUpdatableProperties, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promptId' is not null or undefined
            assertParamExists('updateById', 'promptId', promptId)
            // verify required parameter 'promptUpdatableProperties' is not null or undefined
            assertParamExists('updateById', 'promptUpdatableProperties', promptUpdatableProperties)
            const localVarPath = `/prompts/{prompt_id}`
                .replace(`{${"prompt_id"}}`, encodeURIComponent(String(promptId !== undefined ? promptId : `-prompt_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AuthBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: promptUpdatableProperties,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/prompts/{prompt_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(promptUpdatableProperties, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PromptApi - functional programming interface
 * @export
 */
export const PromptApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PromptApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a prompt by its id
         * @summary Create Prompt Route
         * @param {PromptApiCreatePromptByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPromptById(requestParameters: PromptApiCreatePromptByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromptNullable>> {
            const createPromptProperties: CreatePromptProperties = {
                title: requestParameters.title,
                content: requestParameters.content,
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPromptById(createPromptProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all public prompt
         * @summary Get Prompts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPublicPrompts(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Prompt>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPublicPrompts(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a prompt by its id
         * @summary Get Prompt
         * @param {PromptApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: PromptApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromptNullable>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.promptId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a prompt by its id
         * @summary Update Prompt
         * @param {PromptApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateById(requestParameters: PromptApiUpdateByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromptNullable>> {
            const promptUpdatableProperties: PromptUpdatableProperties = {
                title: requestParameters.title,
                content: requestParameters.content,
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateById(requestParameters.promptId, promptUpdatableProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PromptApi - factory interface
 * @export
 */
export const PromptApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PromptApiFp(configuration)
    return {
        /**
         * Create a prompt by its id
         * @summary Create Prompt Route
         * @param {PromptApiCreatePromptByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPromptById(requestParameters: PromptApiCreatePromptByIdRequest, options?: AxiosRequestConfig): AxiosPromise<PromptNullable> {
            return localVarFp.createPromptById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all public prompt
         * @summary Get Prompts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPublicPrompts(options?: AxiosRequestConfig): AxiosPromise<Array<Prompt>> {
            return localVarFp.getAllPublicPrompts(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a prompt by its id
         * @summary Get Prompt
         * @param {PromptApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: PromptApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<PromptNullable> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a prompt by its id
         * @summary Update Prompt
         * @param {PromptApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById(requestParameters: PromptApiUpdateByIdRequest, options?: AxiosRequestConfig): AxiosPromise<PromptNullable> {
            return localVarFp.updateById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPromptById operation in PromptApi.
 * @export
 * @interface PromptApiCreatePromptByIdRequest
 */
export type PromptApiCreatePromptByIdRequest = {
    
} & CreatePromptProperties

/**
 * Request parameters for getById operation in PromptApi.
 * @export
 * @interface PromptApiGetByIdRequest
 */
export type PromptApiGetByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PromptApiGetById
    */
    readonly promptId: string
    
}

/**
 * Request parameters for updateById operation in PromptApi.
 * @export
 * @interface PromptApiUpdateByIdRequest
 */
export type PromptApiUpdateByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PromptApiUpdateById
    */
    readonly promptId: string
    
} & PromptUpdatableProperties

/**
 * PromptApiGenerated - object-oriented interface
 * @export
 * @class PromptApiGenerated
 * @extends {BaseAPI}
 */
export class PromptApiGenerated extends BaseAPI {
    /**
     * Create a prompt by its id
     * @summary Create Prompt Route
     * @param {PromptApiCreatePromptByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptApiGenerated
     */
    public createPromptById(requestParameters: PromptApiCreatePromptByIdRequest, options?: AxiosRequestConfig) {
        return PromptApiFp(this.configuration).createPromptById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all public prompt
     * @summary Get Prompts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptApiGenerated
     */
    public getAllPublicPrompts(options?: AxiosRequestConfig) {
        return PromptApiFp(this.configuration).getAllPublicPrompts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a prompt by its id
     * @summary Get Prompt
     * @param {PromptApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptApiGenerated
     */
    public getById(requestParameters: PromptApiGetByIdRequest, options?: AxiosRequestConfig) {
        return PromptApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a prompt by its id
     * @summary Update Prompt
     * @param {PromptApiUpdateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptApiGenerated
     */
    public updateById(requestParameters: PromptApiUpdateByIdRequest, options?: AxiosRequestConfig) {
        return PromptApiFp(this.configuration).updateById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
